# -*- coding: utf-8 -*-
"""Asita_Ganatra_DWM_PRACTICAL_6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oWStFGUpF-CX7LZxph5P03CMR0A5c4Kr
"""

import pandas as pd
import numpy as np

data = {
    'ID' : [1, 2, 3, 4, 5, 6],
    'Name' : ['Asita', 'Shrishti', 'Palak', 'Manya', 'Alankrita', 'Paneri'],
    'Age' : [21, 20, 20, 20, 20, 21],
    'State' : ['Maharastra', 'Andhra Pradesh', 'Madhya Pradesh', 'Maharashtra', 'Maharashtra', 'Uttar Pradesh'],
    'Sales' : [11000, 70000, 30000, 25000, 10000, 10100]
}

df = pd.DataFrame(data)
print("Original Dataset:")
print(df)

#character map
df['Name_Upper'] = df['Name'].str.upper()
print("\nCharacter Map (Uppercase Names):")
print(df[['ID', 'Name', 'Name_Upper']])

#Multicast : create 2 copies of the dataset
df_copy1 = df.copy()
df_copy2 = df.copy()

#transformations on each copy
df_copy1['Sales'] *= 1.1 #increase sales by 10%
df_copy2['Age'] += 5 #increase age by 5 years
print("\nMulticast (Modified Copies):")
print("Copy 1 (Sales Increased): ")
print(df_copy1)
print("\nCopy 2 (Age Increased): ")
print(df_copy2)

#conditional split: sales > 300
high_sales = df[df['Sales'] > 30000]
low_sales = df[df['Sales'] <= 30000]
print("\nConditional Split:")
print("High Sales")
print(high_sales)
print("\nLow Sales")
print(low_sales)

#aggregation: total sales by country
agg_df = df.groupby('State')['Sales'].sum().reset_index()
print("\nAggregation (Total Sales by State):")
print(agg_df)

#sort: sort by sales in descending order
sorted_df = df.sort_values(by='Sales', ascending=False)
print("\nSort (Descending Sales): ")
print(sorted_df)

#derived column: categorize sales as high or low
df['Sales_Category'] = df['Sales'].apply(lambda x: 'High' if x>30000 else 'Low')
print("\nDerived Column (Sales Category):")
print(df[['ID', 'Name', 'Sales', 'Sales_Category']])